/*
 * Copyright (C) 2020 - 2021 FHNW (University of Applied Sciences and Arts Northwestern Switzerland)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package eu.smesec.cysec.coach.malware_scan;

import eu.smesec.cysec.platform.bridge.ILibCal;
import eu.smesec.cysec.platform.bridge.execptions.CacheException;
import eu.smesec.cysec.platform.bridge.generated.Answer;
import eu.smesec.cysec.platform.bridge.generated.Metadata;
import eu.smesec.cysec.platform.bridge.generated.Mvalue;
import eu.smesec.cysec.platform.bridge.generated.Question;
import eu.smesec.cysec.platform.bridge.generated.Questionnaire;
import eu.smesec.cysec.platform.bridge.md.MetadataUtils;
import eu.smesec.cysec.csl.AbstractLib;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;

public class MalwareLib extends AbstractLib {
    private static ArrayList<String> activeBlocks = new ArrayList<>();
    private static ArrayList<String> availableBlocks = new ArrayList<>();
    private static List<String> activeQuestions = new ArrayList<>();
    private HashMap<String, List<String>> questionsPerBlock = new HashMap<>();

    @Override
    protected void onBeginHook() {

    }


    @Override
    protected void onResumeHook(String qId) {

    }

    @Override
    protected void initHook(String id, Questionnaire questionnaire, ILibCal libCal) {

    }

    /*@Override
    public List<Command> onResponseChange(Question question, Answer response, Block block, Questionnaire questionnaire) {

        List<Command> commands = new ArrayList<>();
        String selectedAnswer = response.getText();
        String selectedQuestion = question.getId();

        activeQuestions = questionsPerBlock.get(block.getId());

        if (selectedQuestion.equals("q5")) {
            createOrUpdateMalwareScanEnabledRecommendation();
            getLogger().info("Melanie");
        } else if (selectedQuestion.equals("q6")) {
            createOrUpdateMalwareScanEnabledRecommendation();
        }

        sortQuestionsInBlock();

        Command updateActiveBlocks = new Command(Commands.UPDATE_ACTIVE_BLOCKS.toString(), activeBlocks.toArray(new String[0]));
        Command updateAvailableBlocks = new Command(Commands.UPDATE_AVAILABLE_BLOCKS.toString(), availableBlocks.toArray(new String[0]));
        Command updateActiveQuestions = new Command(Commands.UPDATE_ACTIVE_QUESTIONS.toString(), activeQuestions.toArray(new String[0]));
        commands.add(updateActiveBlocks);
        commands.add(updateAvailableBlocks);
        commands.add(updateActiveQuestions);

        return commands;
    }*/

    @Override
    protected void onResponseChangeHook(Question question, Answer answer) {

    }

    private void sortQuestionsInBlock() {
        activeQuestions.sort(Comparator.comparingInt((questionId -> Integer.parseInt(questionId.substring(1)))));
    }

    private String getStoredAnswer(String questionId) {
        String result;
        try {
            result = cal.getAnswer(questionId).getText();
        } catch (Exception e) {
            result = "";
        }
        return result;
    }

    private void createOrUpdateRecommendation(String name, String priority, String description, String link, String category) {
        List<Mvalue> recommendation = Arrays.asList(MetadataUtils.createMvalueStr(MetadataUtils.MV_NAME, name), MetadataUtils.createMvalueStr(MetadataUtils.MV_ORDER, priority), MetadataUtils.createMvalueStr(MetadataUtils.MV_DESCRIPTION, description), MetadataUtils.createMvalueStr(MetadataUtils.MV_LINK, link));
        Metadata md = MetadataUtils.createMetadata(MetadataUtils.MD_RECOMMENDED + "." + category, recommendation);
        try {
            cal.setMetadataOnCompany(md); // on company - writes to company coach
        } catch (CacheException e) {
            getLogger().info("Failed to create recommendation");
        }
    }

    // deprecated

    private void createOrUpdateMalwareScanEnabledRecommendation() {
        String rec1;
        if (getStoredAnswer("q6").equals("q6o4")) {
            if (getStoredAnswer("q7").equals("q7o4")) {
                rec1 = "Urgent! Apply a suitable malware scanning program such as GravityZone for the servers.";
            } else {
                rec1 = "Urgent! Apply a suitable malware scanning program such as GravityZone for the servers.";
            }
        } else {
            rec1 = "Urgent! Apply a suitable malware scanning program such as GravityZone for the servers";
        }
        getLogger().info(rec1);
        //createOrUpdateRecommendation("Coach recommendation", "150",, "app/coach.jsp#company,q2", "MalwareScanEnabled");
        createOrUpdateRecommendation("Coach recommendation", "1", rec1, "app/coach.jsp#company,q2", "a");
    }
}
